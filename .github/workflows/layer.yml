name: build-layer
on:
  workflow_call:
    secrets:
      token:
        description: "GitHub token to use for authentication"
        required: true
    inputs:
      package-name:
        description: "Name of the package to create."
        required: true
        type: string
      version:
        description: "Version of the package to create."
        required: true
        type: string
      registry:
        description: "Container registry to use for publishing the package."
        required: false
        default: "https://registry.oomol.com"
        type: string

permissions:
  contents: read
  id-token: write

jobs:
  arguments-check:
    runs-on: ubuntu-latest
    steps:
      - name: check argument
        run: |
          if [ -z "${{ inputs.package-name }}" ]; then
            echo "Error: package-name is required"
            exit 1
          fi
          if [ -z "${{ inputs.version }}" ]; then
            echo "Error: version is required"
            exit 1
          fi
  export-layer:
    runs-on: buildjet-2vcpu-ubuntu-2204-arm
    needs: [arguments-check]
    outputs:
      architecture: ${{ steps.arch.outputs.architecture }}
    steps:
      - name: architecture
        run: |
          echo "architecture=${{ (runner.arch == 'ARM64' || runner.arch == 'ARM') && 'arm64' || 'amd64' }}" >> $GITHUB_OUTPUT
        id: arch
      - uses: actions/checkout@v4
      - uses: oomol/ovmlayer-rootfs/.github/actions/layer@main
        with:
          token: ${{ secrets.token }}
          architecture: ${{ steps.arch.outputs.architecture }}
      - name: create layer
        run: |
          oocana package-layer create ${{ github.workspace }}
      - name: export layer
        run: |
          oocana package-layer export ${{ github.workspace }} ${{ runner.temp }}/export
      - name: Zip layer
        run: |
          cd ${{ runner.temp }}/export
          zip -r ${{ steps.arch.outputs.architecture }}-layer.zip .
      - name: Install OIDC Client from Core Package
        run: npm install @actions/core@1.11.1 @actions/http-client
        shell: bash
      - name: Get Id Token
        uses: actions/github-script@v7
        id: id_token
        with:
          script: |
            const coredemo = require('@actions/core')
            let id_token = await coredemo.getIDToken()
            coredemo.setOutput('id_token', id_token)
      - name: Upload layer
        run: |
          cd ${{ runner.temp }}/export
          response=$(curl --fail-with-body -X POST -H "Authorization: github-action-${{ steps.id_token.outputs.id_token }}" -H "Content-Type: application/json" -d "{\"fileKey\": \"${{ steps.arch.outputs.architecture }}-layer.zip\"}" ${{ inputs.registry }}/-/oomol/packages/${{ inputs.package-name }}/${{ inputs.version }}/layers/presigned-upload-url)
          curl --fail-with-body -X PUT -H "Content-Type: application/octet-stream" -T ./${{ steps.arch.outputs.architecture }}-layer.zip "$response"


  upload-layer:
    runs-on: buildjet-4vcpu-ubuntu-2204	
    permissions:
      contents: read
      id-token: write
    needs: [export-layer]
    steps:
      - name: Install OIDC Client from Core Package
        run: npm install @actions/core@1.11.1 @actions/http-client
        shell: bash
      - name: Get Id Token
        uses: actions/github-script@v7
        id: id_token
        with:
          script: |
            const coredemo = require('@actions/core')
            let id_token = await coredemo.getIDToken()
            coredemo.setOutput('id_token', id_token)
      - name: Post layer
        run: |
          set -x
          cd ${{ runner.temp }}/export
          payload='{"arm64": "arm64-layer.zip"}'
          echo "Payload: $payload"
          curl --fail-with-body -X PUT -H "Authorization: github-action-${{ steps.id_token.outputs.id_token }}" -H "Content-Type: application/json" -d "$payload" ${{ inputs.registry }}/-/oomol/packages/${{ inputs.package-name }}/${{ inputs.version }}/layers/file-paths